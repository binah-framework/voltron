import Data.ByteString (ByteString)
import Data.Text       (Text)

------------------------------------------------------------------------------------------
predicate isInstructor   :: ClassId -> UserId  -> Bool
predicate isInGroup      :: ClassId -> GroupId -> UserId -> Bool
predicate isAdmin        :: UserId  -> Bool
predicate isEnrolled     :: ClassId -> UserId -> Bool
------------------------------------------------------------------------------------------
policy IsInstructorG = \group viewer ->
  isInstructor (groupClass group) (entityKey viewer)

policy IsInstructorE = \enroll viewer ->
  isInstructor (enrollClass enroll) (entityKey viewer)

policy IsInstructorC = \class viewer ->
  isInstructor (entityKey class) (entityKey viewer)

policy IsInGroupG = \group viewer ->
  isInGroup (groupClass group) (entityKey group) (entityKey viewer)

policy IsInGroupE = \enroll viewer ->
  isInGroup (enrollClass enroll) (enrollGroup enroll) (entityKey viewer)

policy IsSelf = \user viewer ->
  viewer == user

policy IsAdmin = \viewer ->
  isAdmin (entityKey viewer)

------------------------------------------------------------------------------------------

User
  emailAddress  Text
  password      ByteString
  firstName     Text
  lastName      Text
  theme         Text
  keyBinds      Text
  admin         Bool

  UniqueEmailAddress emailAddress
  assert { admin => isAdmin entityKey }
  read   [ password ] @IsSelf
  update [ password, level, emailAddress ] { \_ _ _ -> False }
  update [ firstName, lastName ] { \old _ viewer -> IsSelf old viewer }

Class
  institution Text
  name        Text
  instructor  UserId
  editorLang  Text

  UniqueInstClass institution name
  assert { isInstructor entityKey instructor }
  insert { \_ v -> IsAdmin v }
  update [ institution, name, instructor ] { \_ _ _ -> False }
  update [ editorLang ] { \c _ v -> IsInstructorC c v }

Group
  name       Text
  editorLink Text
  class      ClassId

  UniqueGroupClass name class

  insert @IsInstructorG

  read   [ editorLink ] { \g v -> IsInstructorG g v || IsInGroupG g v }

  update [ name, class ] { \g _ v -> False }
  update [ editorLink ]  { \g _ v -> IsInstructorG g v }

Enroll
  student    UserId
  class      ClassId
  group      GroupId

  UniqueEnroll student class

  assert { isInGroup class group student }
  insert @IsInstructorE
  read   [ student, group, class ]  { \e v -> IsInstructorE e v || IsInGroupE e v }
  update [ student, class ]  { \_ _ _ -> False }

ResetPassword
  email Text
  code  Text
  valid Bool
  UniqueReset code